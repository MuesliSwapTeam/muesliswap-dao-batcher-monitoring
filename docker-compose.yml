version: "3"
services:
  database:
    image: postgres:16.1-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-batcher_analytics}
      POSTGRES_USER: ${POSTGRES_USER:-analytics}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-analytics}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U analytics" ]
      interval: 2s
      timeout: 5s
      retries: 10
    networks:
      app_network:
      

  ogmios:
    # Connects to the Cardano node and provides an API for accessing blocks
    image: cardanosolutions/ogmios:v6.5.0
    restart: on-failure
    command: [
      "--host", "0.0.0.0",
      "--node-socket", "/ipc/node.socket",
      "--node-config", "/config/mainnet/cardano-node/config.json"
    ]
    volumes:
      - /home/cardano/cardano-node/db/:/ipc
    networks:
      app_network:
        aliases:
          - batcher-ogmios


  querier:
    # Reads new blocks from Ogmios and puts processed data in database (in real-time)
    depends_on:
      database:
        condition: service_healthy
      ogmios:
        condition: service_started
    build:
      context: .
    environment:
      DATABASE_URI: "postgresql+psycopg://${POSTGRES_USER:-analytics}:${POSTGRES_PASSWORD:-analytics}@database:5432/${POSTGRES_DB:-batcher_analytics}"
      OGMIOS_URL: "ws://batcher-ogmios:1337"
      OGMIOS_HOSTNAME: "batcher-ogmios"
    command: ["python", "-m", "querier"]
    restart: always
    volumes:
      - ./logs:/app/logs
    networks:
      app_network:

  server:
    # Serves data from database 
    depends_on:
      database:
        condition: service_started
    build:
      context: .
    environment:
      DATABASE_URI: "postgresql+psycopg://${POSTGRES_USER:-analytics}:${POSTGRES_PASSWORD:-analytics}@database:5432/${POSTGRES_DB:-batcher_analytics}"
    ports:
      - 8000:8000
    command: ["fastapi", "run", "server/serve.py"]
    networks:
      app_network:

volumes:
  postgres-data:

networks:
  app_network: